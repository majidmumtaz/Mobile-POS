package com.setecs.android.mpos.fragments;

import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.app.ListFragment;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.text.Layout;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;

import com.setecs.android.mpos.R;
import com.setecs.android.mpos.adapters.MenuListAdapter;
import com.setecs.android.mpos.provider.MenuCategory;
import com.setecs.android.mpos.provider.PersonnelRegister;

public class InventoryCategoryFragment extends Fragment {

	private SimpleCursorAdapter mAdapter;
	OnCategorySelectedListener mCallback;
	//protected LinearLayout btnlayout;
	private ActionMode mActionMode;
	private LinearLayout btnLView;	
	private Button btnAddCat, updateCat, deleteCat;
	private int chosenId = 0;
	 private Integer[] mPhotoPool = { R.drawable.categories_drinks, R.drawable.categories_food, 
			 						  R.drawable.categories_apetizers, R.drawable.categories_deserts};

	// used to keep selected position in ListViewfinal
		private int selectedPos = -1;	// init value for not-selected
		
		public void setSelectedPosition(int pos){
			selectedPos = pos;
			// inform the view of this change
			mAdapter.notifyDataSetChanged();
		}

		public int getSelectedPosition(){
			return selectedPos;
		}
	public void onCreate(Bundle state) {
		super.onCreate(state);
		//btnLView = (LinearLayout) getActivity().findViewById(R.id.btn_catlayout);
		//btnLView = (LinearLayout) getActivity().findViewById(R.id.btn_catlayout);
		//btnLView.setVisibility(LinearLayout.INVISIBLE);
	}
	//
	public void addPhotos() {
        int whichPhoto = (int)Math.round(Math.random() * (mPhotoPool.length - 1));
        int newPhoto = mPhotoPool[whichPhoto];
       // mPhotos.add(newPhoto);
       // notifyDataSetChanged();
    }


	// Container Activity must implement this interface
	public interface OnCategorySelectedListener {
		public void onCategorySelected(int position);
		public void enableDisableAddMenuButton();
		public void onDisablingAddCat();
		public void enableRegisterPersonnel();
		public void disableRegisterPersonnel();
	}	
	public void btnAddCategoryVisibility(){
		//btnLView.setVisibility(LinearLayout.VISIBLE);
		btnAddCat.setVisibility(Button.VISIBLE);
		
	}
	public void btnAddCategoryGone(){
		btnAddCat.setVisibility(Button.GONE);
	}
	public void btnAddCatDisabled(){
		btnAddCat.setEnabled(false);
		updateCat.setEnabled(false);
		deleteCat.setEnabled(false);
	}
	public void btnAddCatEnabled(){
		btnAddCat.setEnabled(true);
		btnLView.setEnabled(true);
		updateCat.setEnabled(true);
		deleteCat.setEnabled(true);
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle b) {
		View view = inflater.inflate(R.layout.inventory_category_list,
				container, false);
		final ListView listView = (ListView) view.findViewById(R.id.cat_list);
		btnLView = (LinearLayout) view.findViewById(R.id.btn_catlayout);
		btnLView.setVisibility(LinearLayout.GONE);
		btnAddCat = (Button)view.findViewById(R.id.add_category);
		//Button addCategory = (Button) view.findViewById(R.id.add_category);
		//btnAddCat.setVisibility(Button.GONE);
		//btnLView.setVisibility(LinearLayout.GONE);
		updateCat = (Button) view.findViewById(R.id.btn_catupdate);
		deleteCat = (Button) view.findViewById(R.id.btn_catdelete);
		
		final Cursor categoryCursor = getActivity().managedQuery(
				MenuCategory.Categories.CONTENT_URI, null, null, null, null);

		mAdapter = new CustomAdapter(getActivity(),
				R.layout.inventory_category_row, categoryCursor,
				new String[] { MenuCategory.Categories.CATEGORY_NAME },
				new int[] { R.id.category_name });
		
		listView.setAdapter(mAdapter);
		
		listView.setItemsCanFocus(false);
		listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
		mAdapter.notifyDataSetChanged();
		listView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// When clicked, send event to the host activity with the id of
				// the category
				
				if (listView.getCheckedItemPosition()== position){
						if(!view.isSelected()){
						    view.setSelected(true);
							int categoryIdColumnIndex = categoryCursor
							.getColumnIndex(MenuCategory.Categories.CATEGORY_ID);
							int catId = categoryCursor.getInt(categoryIdColumnIndex);			
							listView.setSelection(catId);						
						}
						else view.setSelected(false);
				}
				else{
					
					//view.setBackgroundColor(Color.TRANSPARENT);
					listView.setSelection(position);
				}
				
				//mCallback.onCategorySelected(catId);				
			}
		});

		// attach the add button
		
		btnAddCat.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) {
				add();
			}
		});
		return view;
	}

	private void add() {
		FragmentManager fm = getFragmentManager();
		if (fm.findFragmentByTag("dialog") == null) {

			AddCategoryDialogFragment frag = AddCategoryDialogFragment
					.newInstance();
			frag.show(fm, "dialog");
		}
	}
	private void modifyCategory(String catID, String catName){

		FragmentManager fm = getFragmentManager();
			if (fm.findFragmentByTag("dialog") == null) {

				ModifyCategoryDialogFragment frag = ModifyCategoryDialogFragment
					.newInstance(catID, catName);
				//	frag.getLoaderManager();
				frag.show(fm, "dialog");

			}
	}
	public void onAttach(Activity activity) {
		super.onAttach(activity);

		// This makes sure that the container activity has implemented
		// the callback interface. If not, it throws an exception
		try {
			mCallback = (OnCategorySelectedListener) activity;
			
		} catch (ClassCastException e) {
			throw new ClassCastException(activity.toString()
					+ " must implement OnCategorySelectedListener");
		}
	}
	
	public class CustomAdapter extends SimpleCursorAdapter {
		private final Context mContext;
		private final int mLayout;
		private final Cursor mCursor;
		private final int mCategoryNameIndex;
		private final int mIdIndex;
		private final LayoutInflater mLayoutInflater;
		
		public final class ViewHolder {
			public TextView categoryName;
			public ImageView categoryImage;
			public CheckBox checkBox;
		}

		public CustomAdapter(Context context, int layout, Cursor c,
				String[] from, int[] to) {
			super(context, layout, c, from, to);
						
			this.mContext = context;
			this.mLayout = layout;
			this.mCursor = c;
			this.mCategoryNameIndex = mCursor
					.getColumnIndex(MenuCategory.Categories.CATEGORY_NAME);
			this.mIdIndex = mCursor
					.getColumnIndex(MenuCategory.Categories.CATEGORY_ID);
			this.mLayoutInflater = LayoutInflater.from(mContext);
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			
			//if (mCursor.moveToPosition(position)) {
				ViewHolder viewHolder;

				if (convertView == null) {
					convertView = mLayoutInflater.inflate(mLayout, null);

					viewHolder = new ViewHolder();
					viewHolder.categoryName = (TextView) convertView
							.findViewById(R.id.category_name);
					//viewHolder.checkBox = (CheckBox) convertView
						//	.findViewById(R.id.checkBox);
					viewHolder.categoryImage = (ImageView) convertView
					  		.findViewById(R.id.list_catimage);
					convertView.setTag(viewHolder);
				} else {
					viewHolder = (ViewHolder) convertView.getTag();					
				}
				String catName = mCursor.getString(mCategoryNameIndex);
				int catId = mCursor.getInt(mIdIndex);
				//if (catId != 0){mCallback.enableDisableAddMenuButton();}
				viewHolder.categoryName.setText(catName);
				viewHolder.categoryName.setTag(catId);
				
				/*viewHolder.checkBox.setChecked(false);
				viewHolder.checkBox.setBackgroundColor(Color.DKGRAY);
				viewHolder.checkBox.setTag(catId);
				viewHolder.checkBox
						.setOnCheckedChangeListener(new OnCheckedChangeListener() {
							public void onCheckedChanged(CompoundButton cb,
									boolean isChecked) {
								if (cb.isChecked()) {
									//if (mActionMode == null)
										chosenId = (Integer) cb.getTag();
										mCallback.enableDisableAddMenuButton();
										mCallback.onDisablingAddCat();
										btnAddCat.setEnabled(false);
											//mActionMode = getActivity()
											//.startActionMode(mActionModeCallback);
										btnAddCat.setVisibility(Button.GONE);
										btnLView.setVisibility(LinearLayout.VISIBLE);								
										mCallback.disableRegisterPersonnel();	
										boolean vSuccess, vSuccess1;
										vSuccess = vSuccess1 = false;
										vSuccess = updateCategory();
										vSuccess1 = deleteCategory();
										if(vSuccess == true || vSuccess1 ==  true){
											btnAddCat.setVisibility(Button.GONE);
											btnLView.setVisibility(LinearLayout.VISIBLE);								
											btnAddCategoryGone();
										}
								} else if (isChecked == false) {
									// action
									btnAddCategoryGone();
									//mCallback.enableDisableAddMenuButton();
									btnAddCat.setVisibility(Button.VISIBLE);
									btnLView.setVisibility(LinearLayout.GONE);
									btnAddCat.setEnabled(true);
									mCallback.enableRegisterPersonnel();
									if (mActionMode != null) {
										mActionMode.finish();
										mActionMode = null;
										
									}
								}else{
									//mCallback.enableDisableAddMenuButton();
									mCallback.enableRegisterPersonnel();
									btnAddCat.setVisibility(Button.VISIBLE);
									btnLView.setVisibility(LinearLayout.GONE);
								}
							}
						});*/
			//}
			return convertView;
		}
	}
	//--------------------------------------------------
	protected boolean updateCategory(){
		updateCat.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) {
				try{
					String projection[]= new String[]{
							MenuCategory.Categories.CATEGORY_ID,
							MenuCategory.Categories.CATEGORY_NAME
					};
					Cursor cr = getActivity().getContentResolver().query(MenuCategory.Categories.CONTENT_URI.buildUpon()
							.appendPath(String.valueOf(chosenId)).build(),
							projection, null, null, null);
					
					cr.moveToFirst();
					String catId = (cr.getString(cr.getColumnIndex(MenuCategory.Categories.CATEGORY_ID)));
					String catName =(cr.getString(cr.getColumnIndex(MenuCategory.Categories.CATEGORY_NAME)));
					modifyCategory(catId, catName);
					
				}catch(Exception e){
					return;
				}				
			}			
		});
		return true;		
	}
	protected boolean deleteCategory(){
		deleteCat.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) {
				getActivity().getContentResolver().delete(
						MenuCategory.Categories.CONTENT_URI.buildUpon()
								.appendPath(String.valueOf(chosenId)).build(),
						null, null);
			}
		});
		return true;
		
	}
	//---------------------------Action Bar Items Logic-----------------------
	private ActionMode.Callback mActionModeCallback = new ActionMode.Callback() {

		// Called when the action mode is created; startActionMode() was called
		@Override
		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
			// Inflate a menu resource providing context menu items
			MenuInflater inflater = mode.getMenuInflater();
			inflater.inflate(R.menu.category_row_selected, menu);
			return true;
		}

		// Called each time the action mode is shown. Always called after
		// onCreateActionMode, but
		// may be called multiple times if the mode is invalidated.
		@Override
		public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
			return false; // Return false if nothing is done
		}

		// Called when the user selects a contextual menu item
		@Override
		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
			switch (item.getItemId()) {
			case R.id.menu_edit:
				// edit category
				String projection[]= new String[]{
						MenuCategory.Categories.CATEGORY_ID,
						MenuCategory.Categories.CATEGORY_NAME
				};
				Cursor cr = getActivity().getContentResolver().query(MenuCategory.Categories.CONTENT_URI.buildUpon()
						.appendPath(String.valueOf(chosenId)).build(),
						projection, null, null, null);
				
				cr.moveToFirst();
				String catId = (cr.getString(cr.getColumnIndex(MenuCategory.Categories.CATEGORY_ID)));
				String catName =(cr.getString(cr.getColumnIndex(MenuCategory.Categories.CATEGORY_NAME)));
				modifyCategory(catId, catName);
				
				mode.finish(); // Action picked, so close the CAB
				return true;
			case R.id.menu_delete:
				// delete category
				getActivity().getContentResolver().delete(
						MenuCategory.Categories.CONTENT_URI.buildUpon()
								.appendPath(String.valueOf(chosenId)).build(),
						null, null);
				//InventoryMenuItemsFragment newFragment = (InventoryMenuItemsFragment)
					//			getFragmentManager().findFragmentById(R.id.menuitems);
				
				//newFragment.onStart();
				
				//updateListItems();									
				mode.finish(); // Action picked, so close the CAB
				return true;
			default:
				return false;
			}
		}

		// Called when the user exits the action mode
		@Override
		public void onDestroyActionMode(ActionMode mode) {
			mActionMode = null;
		}
	};

}
